def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: "androidx.navigation.safeargs.kotlin"

import com.android.build.OutputFile

project.ext.react = [
        entryFile: "index.js",
        enableHermes: false,  // clean and rebuild if changing
]

apply from: "../../node_modules/react-native/react.gradle"
def enableSeparateBuildPerCPUArchitecture = false
def jscFlavor = 'org.webkit:android-jsc:+'
def enableHermes = project.ext.react.get("enableHermes", false);

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.instinctools.routine"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 3
        versionName "1.0.0"

        setProperty("archivesBaseName", "Routine-v.${versionName}")
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        debug {
            storeFile file("../signing/debug.keystore")
            storePassword "routinedebug"
            keyAlias "routinedebug"
            keyPassword "routinedebug"
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix ".debug"
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding = true
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.fragment:fragment-ktx:1.3.0-alpha05'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0'
    implementation "androidx.navigation:navigation-fragment-ktx:2.3.0"
    implementation "androidx.recyclerview:recyclerview:1.2.0-alpha05"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation 'com.google.android.material:material:1.3.0-alpha01'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0-rc01'

    def lifecycle_version = "2.3.0-alpha03"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    implementation 'cn.aigestudio.wheelpicker:WheelPicker:1.1.3'

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.3.9"
    implementation "io.github.reactivecircus.flowbinding:flowbinding-android:0.12.0"

    implementation "androidx.room:room-runtime:2.2.5"
    kapt "androidx.room:room-compiler:2.2.5"
    implementation "androidx.room:room-ktx:2.2.5"

    implementation 'joda-time:joda-time:2.10.6'

    implementation 'com.google.firebase:firebase-crashlytics:17.0.1'
    implementation 'com.google.firebase:firebase-auth-ktx:19.3.1'
    implementation 'com.google.firebase:firebase-firestore-ktx:21.4.3'

    implementation "com.dropbox.mobile.store:store4:4.0.0-alpha07"
    implementation 'com.jakewharton.timber:timber:4.7.1'

    implementation 'androidx.multidex:multidex:2.0.1'

    // react-native
    implementation "com.facebook.react:react-native:+"  // From node_modules
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.4'

    implementation "dev.chrisbanes:insetter-ktx:0.3.1"

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }

    // kmp
//    implementation project(':kmp')
    implementation project(':schedulenotification')
}

afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            def newName = "RoutineMerged-v.${variant.mergedFlavor.versionName}-${variant.buildType.name}.apk"
            outputFileName = newName.replace("-release", "")
        }
    }
}

File signPropsFile = file("../signing/release.props")
if (signPropsFile.exists()) {
    Properties props = new Properties()
    props.load(new FileInputStream(signPropsFile))
    android {
        signingConfigs {
            release {
                storeFile file("../signing/release.keystore")
                storePassword props['storePass']
                keyAlias props['keyAlias']
                keyPassword props['keyPass']
            }
        }
        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
        }
    }
} else {
    println("WARNING: debug keystore will be used for signing")
    android {
        buildTypes {
            release {
                signingConfig signingConfigs.debug
            }
        }
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

